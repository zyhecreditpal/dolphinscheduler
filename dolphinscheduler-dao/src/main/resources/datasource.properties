#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# datasource configuration
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/dolphinscheduler
#spring.datasource.username=root
#spring.datasource.password=root

# mysql example
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/dolphinscheduler?useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=root

spring.datasource.impala.driver-class-name=com.cloudera.impala.jdbc41.Driver
spring.datasource.impala.url=jdbc:impala://10.10.10.38:21050/zhibiaoxitong;AuthMech=3
spring.datasource.impala.username=zhibiaoxitonguser
spring.datasource.impala.password=D1TAh@zw30Yb^CfD

spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
#spring.datasource.druid.master.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.druid.master.url=jdbc:mysql://127.0.0.1:3306/dolphinscheduler?useUnicode=true&characterEncoding=UTF-8
#spring.datasource.druid.master.username=root
#spring.datasource.druid.master.password=root
#
#spring.datasource.druid.slave.enable=true
#spring.datasource.druid.slave.driver-class-name=com.cloudera.impala.jdbc41.Driver
#spring.datasource.druid.slave.url=jdbc:impala://10.10.10.38:21050/zhibiaoxitong;AuthMech=3
#spring.datasource.druid.slave.username=zhibiaoxitonguser
#spring.datasource.druid.slave.password=D1TAh@zw30Yb^CfD
#
#spring.datasource.druid.initialSize=5
#spring.datasource.druid.minIdle=5
#spring.datasource.druid.maxActive=50
#spring.datasource.druid.maxWait=60000
#spring.datasource.druid.timeBetweenEvictionRunsMillis=60000
#spring.datasource.druid.minEvictableIdleTimeMillis=300000
#spring.datasource.druid.maxEvictableIdleTimeMillis=900000
#spring.datasource.druid.validationQuery=SELECT 1
#spring.datasource.druid.testWhileIdle=true
#spring.datasource.druid.testOnBorrow=true
#spring.datasource.druid.testOnReturn=false

# connection configuration
#spring.datasource.initialSize=5
# min connection number
#spring.datasource.minIdle=5
# max connection number
#spring.datasource.maxActive=50

# max wait time for get a connection in milliseconds. if configuring maxWait, fair locks are enabled by default and concurrency efficiency decreases.
# If necessary, unfair locks can be used by configuring the useUnfairLock attribute to true.
#spring.datasource.maxWait=60000

# milliseconds for check to close free connections
#spring.datasource.timeBetweenEvictionRunsMillis=60000

# the Destroy thread detects the connection interval and closes the physical connection in milliseconds if the connection idle time is greater than or equal to minEvictableIdleTimeMillis.
#spring.datasource.timeBetweenConnectErrorMillis=60000

# the longest time a connection remains idle without being evicted, in milliseconds
#spring.datasource.minEvictableIdleTimeMillis=300000

#the SQL used to check whether the connection is valid requires a query statement. If validation Query is null, testOnBorrow, testOnReturn, and testWhileIdle will not work.
#spring.datasource.validationQuery=SELECT 1

#check whether the connection is valid for timeout, in seconds
#spring.datasource.validationQueryTimeout=3

# when applying for a connection, if it is detected that the connection is idle longer than time Between Eviction Runs Millis,
# validation Query is performed to check whether the connection is valid
#spring.datasource.testWhileIdle=true

#execute validation to check if the connection is valid when applying for a connection
#spring.datasource.testOnBorrow=true
#execute validation to check if the connection is valid when the connection is returned
#spring.datasource.testOnReturn=false
#spring.datasource.defaultAutoCommit=true
#spring.datasource.keepAlive=true

# open PSCache, specify count PSCache for every connection
#spring.datasource.poolPreparedStatements=true
#spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
